From 01e49320c122f3f4acf6e99249bc8d665df1f3f6 Mon Sep 17 00:00:00 2001
From: Christopher Degawa <ccom@randomderp.com>
Date: Wed, 16 Sep 2020 01:37:53 +0000
Subject: [PATCH 01/12] recv(): Cast to char * for recv()

fixes

```c
../../modules/access_output/udp.c: In function 'ThreadWrite':
../../modules/access_output/udp.c:397:41: warning: pointer targets in passing argument 2 of 'send' differ in signedness [-Wpointer-sign]
  397 |         if ( send( p_sys->i_handle, p_pk->p_buffer, p_pk->i_buffer, 0 ) == -1 )
      |                                     ~~~~^~~~~~~~~~
      |                                         |
      |                                         uint8_t * {aka unsigned char *}
In file included from ../../modules/access_output/udp.c:44:
D:/media-autobuild_suite/msys64/mingw32/i686-w64-mingw32/include/winsock2.h:1027:60: note: expected 'const char *' but argument is of type 'uint8_t *' {aka 'unsigned char *'}
 1027 |   WINSOCK_API_LINKAGE int WSAAPI send(SOCKET s,const char *buf,int len,int flags);
      |                                                ~~~~~~~~~~~~^~~
```

Signed-off-by: Christopher Degawa <ccom@randomderp.com>
---
 modules/access/amt.c       | 2 +-
 modules/access/mms/mmstu.c | 4 ++--
 modules/access/satip.c     | 2 +-
 3 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/modules/access/amt.c b/modules/access/amt.c
index 52bf0271ef..c64d5668a2 100644
--- a/modules/access/amt.c
+++ b/modules/access/amt.c
@@ -591,7 +591,7 @@ static block_t *BlockAMT(stream_t *p_access, bool *restrict eof)
     if( sys->tryAMT )
     {
         /* AMT is a wrapper for UDP streams, so recv is used. */
-        len = recv( sys->sAMT, pkt->p_buffer, sys->mtu + tunnel, 0 );
+        len = recv( sys->sAMT, (char *)pkt->p_buffer, sys->mtu + tunnel, 0 );
 
         /* Check for the integrity of the received AMT packet */
         if( len < 0 || *(pkt->p_buffer) != AMT_MULT_DATA )
diff --git a/modules/access/mms/mmstu.c b/modules/access/mms/mmstu.c
index c524b22816..d2d709898b 100644
--- a/modules/access/mms/mmstu.c
+++ b/modules/access/mms/mmstu.c
@@ -1125,14 +1125,14 @@ static int NetFillBuffer( stream_t *p_access )
     {
         i_tcp_read =
             recv( p_sys->i_handle_tcp,
-                  p_sys->buffer_tcp + p_sys->i_buffer_tcp,
+                  (char *)p_sys->buffer_tcp + p_sys->i_buffer_tcp,
                   i_tcp + MMS_BUFFER_SIZE/2, 0 );
     }
 
     if( i_udp > 0 && ufd[i_tcp > 0].revents )
     {
         i_udp_read = recv( p_sys->i_handle_udp,
-                           p_sys->buffer_udp + p_sys->i_buffer_udp,
+                           (char *)p_sys->buffer_udp + p_sys->i_buffer_udp,
                            i_udp + MMS_BUFFER_SIZE/2, 0 );
     }
 
diff --git a/modules/access/satip.c b/modules/access/satip.c
index 4bb4a563aa..e9971af998 100644
--- a/modules/access/satip.c
+++ b/modules/access/satip.c
@@ -506,7 +506,7 @@ static void *satip_thread(void *data) {
         }
 
         block_cleanup_push(block);
-        len = recv(sock, block->p_buffer, RTSP_RECEIVE_BUFFER, 0);
+        len = recv(sock, (char * )block->p_buffer, RTSP_RECEIVE_BUFFER, 0);
         vlc_cleanup_pop();
 
         if (len < RTP_HEADER_SIZE) {
-- 
2.25.1

